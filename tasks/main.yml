---
- name: Ensure apt cache is updated
  apt: 
    update_cache: yes
  changed_when: false

- name: Ensure pre-requisites are installed
  apt: 
    name: "{{ item }}"
    state: present
  with_items:
    - git      
    - libpcre3
    - libpcre3-dev
    - zlib1g
    - zlib1g-dev
    - openssl
    - libssl-dev
    - libperl-dev  
    - build-essential  
    - libxml2-dev
    - libxslt1-dev
    - libgd-dev
    - libgeoip-dev
    - libkrb5-dev

- name: Print dict
  debug:
    msg: "{{ item.key}} --- {{ item.value }}"
  with_dict: "{{ nginx_extra_modules }}"   

- name: Download 3rd party NGINX modules
  git: 
    repo: "{{ item.value }}"
    dest: "{{ nginx_extra_modules_dir }}/{{ item.key }}"
  with_dict: "{{ nginx_extra_modules }}" 

- name: Check for installed nginx version
  shell: "{{ nginx_sbin_path }} -V"
  register: nginx_version_info
  failed_when: false
  changed_when: false

- name: Calculate if nginx needs to be installed
  set_fact:
    nginx_requires_installation: "{{ nginx_version_info.stdout == '' }}"

- name: Print requires installation variable
  debug: 
    msg: "Requires installation: {{ nginx_requires_installation }}"        

- name: Ensure directory is created to download nginx source into
  file: 
    path: "{{ nginx_download_directory }}"
    state: directory  

- name: Download source code
  unarchive: 
    remote_src: yes
    dest: "{{ nginx_download_directory }}"
    src: "{{ nginx_download_url }}"

- name: Set Configure string
  set_fact:
    configure: > 
      ./configure 
      --prefix={{ nginx_prefix }}
      --sbin-path={{ nginx_sbin_path }}
      --modules-path={{ nginx_modules_path }}
      --conf-path={{ nginx_conf_path }}
      --error-log-path={{ nginx_error_log_path }}
      --pid-path={{ nginx_pid_path }}
      --lock-path={{ nginx_lock_path }}
      --user={{ nginx_user }}
      --group={{ nginx_group }}
      {{ nginx_with_modules | map("regex_replace", "^(.*)$", "--with-\1") | join(" ") }}
      {{ nginx_without_modules | map("regex_replace", "^(.*)$", "--without-\1") | join(" ") }}
      {{ nginx_extra_modules | map("regex_replace", "^(.*)$", "--add-module={{ nginx_extra_modules_dir }}/\1") | join(" ") }} 

- name: Display configure string
  debug: 
    msg: "{{ configure }}"

- name: Ensure configure script is run with correct parameters
  shell: "{{ configure }}"
  args:
    chdir: "{{ nginx_download_directory }}/nginx-{{ nginx_version }}"

- name: Make
  shell: make
  args: 
    chdir: "{{ nginx_download_directory }}/nginx-{{ nginx_version }}"  

- name: Make install
  shell: make install
  args:
    chdir: "{{ nginx_download_directory }}/nginx-{{ nginx_version }}"  

- name: Create nginx systemd configuration
  template:   
    src: ../templates/nginx.service.j2
    dest: /etc/systemd/system/nginx.service

- name: Enable nginx service
  systemd:
    enabled: yes
    name: nginx.service
    state: started
